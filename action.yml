name: "auto-release"
description: "Automatically draft release notes for your next release as Pull Requests are merged into main. Optionally, automatically publish a release for every Pull Request."
inputs:
  token:
    description: "Standard GitHub token (e.g., secrets.GITHUB_TOKEN)"
    required: false
    default: ${{ github.token }}
  publish:
    description: "Whether to publish a new release immediately"
    required: false
    default: "false"
  prerelease:
    description: "Boolean indicating whether this release should be a prerelease"
    required: false
    default: ""
  config-name:
    description: |
      If your workflow requires multiple release-drafter configs it is helpful to override the config-name.
      The config should still be located inside `.github` as that's where we are looking for config files.
    required: false
    default: 'configs/draft-release.yml'

runs:
  using: "composite"
  steps:
    - name: Checkout commit
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.token }}
        fetch-tags: true

    - uses: actions/github-script@v7
      name: Get PR labels
      id: pr-info
      with:
        retries: 3
        github-token: ${{ inputs.token }}
        script: |
          const repository = context.repo;
          const sha = context.sha;
          
          const resp = await github.rest.pulls.list({
            ...repository,
            sort: 'updated',
            direction: 'desc',
            state: 'closed',
            per_page: 100
          });
          
          const pull = resp.data.find(p => p.merge_commit_sha === sha);
          if (pull) {            
            return {
              number: pull.number,
              labels: pull.labels.map(l => l.name).join('\n')
            };
          };
          
          return {};

    - name: Check for duplicates
      shell: bash
      id: check-duplicate
      run: |
        latest_hash=$(git rev-parse ${{ github.ref_name }})
        git rev-parse ${{ github.ref_name }}
        tags=$(git tag --contains "$latest_hash")
        git tag --contains "$latest_hash"
        git tag --contains ${latest_hash}
        echo "${tags}"
        if [[ -n $tags ]]; then
          echo "exists=true" >> "$GITHUB_OUTPUT"
        else
          echo "exists=false" >> "$GITHUB_OUTPUT"
        fi

    # Drafts the next Release and compiles the notes as Pull Requests are merged into "main" (unless the `no-release` label is used on the PR)
    - uses: release-drafter/release-drafter@v6
      name: Draft release
      id: release
      if: steps.check-duplicate.outputs.exists == 'false'
      with:
        publish: ${{ inputs.publish == 'true' && !contains(fromJson(steps.pr-info.outputs.result).labels, 'no-release')}}
        prerelease: ${{ (inputs.prerelease != '' && inputs.prerelease) || contains(fromJson(steps.pr-info.outputs.result).labels, 'prerelease') }}
        latest: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
        config-name: ${{ inputs.config-name }}
      env:
        GITHUB_TOKEN: ${{ inputs.token }}

    # Workaround for https://github.com/release-drafter/release-drafter/issues/1313
    - name: Release Summary
      if: steps.check-duplicate.outputs.exists == 'false'
      shell: bash
      run: |
        echo 'Checking to make sure release id is not empty: "${{ steps.release.outputs.id }}"'
        ! test -z "${{ steps.release.outputs.id }}"
        echo '## ${{ steps.release.outputs.id }} (${{ steps.release.outputs.tag_name }})' >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.release.outputs.body}}' >> $GITHUB_STEP_SUMMARY
        echo '[View Release](${{ steps.release.outputs.html_url }})' >> $GITHUB_STEP_SUMMARY
